# -*- coding: utf-8 -*-
"""Titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hcf6idKP8OBN2O_s2Kn5eR2Asav5oL73
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files



uploaded = files.upload()

titanic=pd.read_csv('train.csv')
titanic_test_submission=pd.read_csv('test.csv')
titanic.head(3)

titanic_test_submission=pd.read_csv('test.csv')
titanic_test_submission.head(3)

#get the info of the titanic data 
titanic.info()

#titanic embarked value type and number of type
pd.value_counts(titanic['Embarked'].values.flatten())

#get the number data info
titanic.describe()

#get the overall idea from the data
titanic.hist(bins=50, figsize=(20,15))
plt.show()

titanic.plot(kind="scatter", x="Fare", y="Survived")

#corelation of the data 
corr_matrix = titanic.corr()
corr_matrix

#StratifiedShuffleSplit split the train test data
from sklearn.model_selection import StratifiedShuffleSplit
split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)
for train_index, test_index in split.split(titanic, titanic["Survived"]):
  strat_train_set = titanic.loc[train_index]
  strat_test_set = titanic.loc[test_index]

#consider the data we will consider for our model
titanic_test_temp=strat_train_set.copy()
titanic_train = strat_train_set.drop(["Survived",'PassengerId','Ticket','Name','Cabin'], axis=1)
titanic_train_labels = strat_train_set["Survived"].copy()
titanic_train.head(4)

#Again get the info fom the data idea about missing value
titanic_train.info()

#get the median of the "age" column so that we can replace it with null vlaue
median= titanic_train["Age"].median()
median

#fill the null value with median and the max
titanic_train["Age"]=titanic_train["Age"].fillna(median)
titanic_train["Embarked"]=titanic_train["Embarked"].fillna('S')

#check wheter we are right
titanic_train.info()

pd.value_counts(titanic_train['SibSp'].values.flatten())

pd.value_counts(titanic_train['Parch'].values.flatten())

#text data into numarics
titanic_train_emb=titanic_train["Embarked"]
from sklearn.preprocessing import LabelBinarizer
encoder = LabelBinarizer()
titanic_train_cat_1hot = encoder.fit_transform(titanic_train_emb)

titanic_train_cat_1hot

#text to numaric
titanic_train_sex=titanic_train["Sex"]
from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
titanic_train_sex_encoded = encoder.fit_transform(titanic_train_sex)
titanic_train_sex_encoded.shape

print(titanic_train_sex_encoded.shape)
print(titanic_train_cat_1hot.shape)
print(titanic_train.shape)

titanic_train_temp=titanic_train.drop(["Sex",'Embarked'], axis=1)
titanic_train_temp["Sex"]=titanic_train_sex_encoded
titanic_train_temp.head(3)

from sklearn.pipeline import FeatureUnion
num_attribs = list(titanic_train_temp)
cat_attribs = ["Embarked"]
"""
num_pipeline = Pipeline([
 ('selector', DataFrameSelector(num_attribs,1))
 ])
cat_pipeline = Pipeline([
 ('selector', DataFrameSelector(cat_attribs))
 ])
full_pipeline = FeatureUnion(transformer_list=[
 ("num_pipeline", num_pipeline),
 ("cat_pipeline", cat_pipeline),
 ])
 """

titanic_train_temp[num_attribs].values

titanic_prepared=np.append(titanic_train_temp[num_attribs].values,titanic_train_cat_1hot,axis=1)
print(titanic_prepared.shape)
print(titanic_train_labels.shape)
X_train=titanic_prepared
y_train=titanic_train_labels.values

#Naive Bays
from sklearn.naive_bayes import GaussianNB
some_example= X_train[150:160]
acutal_val=y_train[150:160]
gnb = GaussianNB()
gnb.fit(X_train, y_train)
pred=gnb.predict(some_example)
print(pred)
print(acutal_val)

#Decision tree
from sklearn import tree
some_example= X_train[150:160]
acutal_val=y_train[150:160]
clf = tree.DecisionTreeClassifier()
clf.fit(X_train, y_train)
pred=clf.predict(some_example)
print(pred)
print(acutal_val)

#support vector machine 
from sklearn import svm
some_example= X_train[150:160]
acutal_val=y_train[150:160]
svmc=svm.SVC()
svmc.fit(X_train, y_train)
pred=svmc.predict(some_example)
print(pred)
print(acutal_val)

from sklearn.pipeline import Pipeline
from sklearn.preprocessing import LabelBinarizer

num_attribs = list(titanic_train_temp)
cat_attribs = ["Embarked"]
titanic_test=strat_test_set[num_attribs]

titanic_test['Age']=titanic_test['Age'].fillna(median)

titanic_test_sex=titanic_test["Sex"]
from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
titanic_test_sex_encoded = encoder.fit_transform(titanic_test_sex)
titanic_test_sex_encoded.shape

titanic_test_labels = strat_test_set["Survived"].copy()

titanic_test_emb=strat_test_set["Embarked"]
from sklearn.preprocessing import LabelBinarizer
encoder = LabelBinarizer()
titanic_test_cat_1hot = encoder.fit_transform(titanic_test_emb)

titanic_test_cat_1hot

titanic_test['Sex']=titanic_test_sex_encoded

titanic_test.head(3)

titanic_test_prepared=np.append(titanic_test[num_attribs].values,titanic_test_cat_1hot,axis=1)
print(titanic_test_prepared.shape)
print(titanic_test_labels.shape)
X_test=titanic_test_prepared
y_test=titanic_test_labels.values

#naive bayes, decisiion tree, svm
pred_test_nb=gnb.predict(X_test)
pred_test_dt=clf.predict(X_test)
pred_test_svm=svmc.predict(X_test)
pred_test_sgd=sgd.predict(X_test)
pred_test_rnd=rnd.predict(X_test)

#SGDClassifier
from sklearn.linear_model import SGDClassifier
some_example= X_train[150:160]
acutal_val=y_train[150:160]
sgd = SGDClassifier(loss="hinge", penalty="l2", max_iter=8)
sgd.fit(X_train, y_train)
pred=sgd.predict(some_example)
print(pred)
print(acutal_val)

from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification
rnd = RandomForestClassifier(max_depth=4, random_state=0)
rnd.fit(X_train, y_train)

from sklearn.metrics import accuracy_score
print(accuracy_score(y_test, pred_test_nb))
print(accuracy_score(y_test, pred_test_dt))
print(accuracy_score(y_test, pred_test_svm))
print(accuracy_score(y_test, pred_test_sgd))
print(accuracy_score(y_test, pred_test_rnd))

titanic_test_submission['Age']=titanic_test_submission['Age'].fillna(median)

titanic_test_sub_sex=titanic_test_submission["Sex"]
titanic_test_sex_sub_encoded = encoder.fit_transform(titanic_test_sub_sex)
titanic_test_sex_sub_encoded.shape

titanic_test_submission['Sex']=titanic_test_sex_sub_encoded

titanic_test_submission.head()

titanic_test_sub_emb=titanic_test_submission["Embarked"]
from sklearn.preprocessing import LabelBinarizer
encoder = LabelBinarizer()
titanic_test_sub_cat_1hot = encoder.fit_transform(titanic_test_sub_emb)

titanic_test_sub_cat_1hot.shape

titanic_test_prepared_sub=np.append(titanic_test_submission[num_attribs].values,titanic_test_sub_cat_1hot,axis=1)
print(titanic_test_prepared_sub.shape)

X_test_sub=titanic_test_prepared_sub
X_test_sub.shape

titanic_test_submission=titanic_test_submission[num_attribs]

titanic_test_submission['Fare']=titanic_test_submission['Fare'].fillna(titanic_test_submission['Fare'].median())
titanic_test_submission.info()

predict_rnd_test=rnd.predict(X_test_sub)
print(predict_rnd_test)

with open('wahid.csv', 'w') as f:
  for rs in predict_rnd_test:
    
    f.write(str(rs))
    f.write('\n')

files.download('wahid.csv')